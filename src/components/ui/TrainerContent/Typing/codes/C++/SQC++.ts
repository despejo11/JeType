import { TCplusPlusOne, TCplusPlusTwo, TCplusPlusThree } from './types'

export const SQCplusPlus: {
  ['C++One']: TCplusPlusOne
  ['C++Two']: TCplusPlusTwo
  ['C++Three']: TCplusPlusThree
} = {
  ['C++One']: {
    1: `char galaxy[5] = 'wow'; int *banana = (int*)0xCAFEBABE; unicorn[star];`,
    2: `float pi = 3.14 + galaxy[2] / banana[0xBAD];`,
    3: `int dragon = (galaxy[0] * 42) - (int)nullptr;`,
    4: `char *phoenix = (char*)0xDEADBEEF + galaxy[4];`,
    5: `void *wormhole = banana + (int)'x' * galaxy[3];`,
    6: `if (dragon != 42) galaxy[dragon] = (char)pi;`,
    7: `while (galaxy[1] != banana[-1]) unicorn[dragon]++;`,
    8: `for (int star = 0; star < pi; star += dragon) galaxy[star]--;`,
    9: `banana[(int)pi] = *(galaxy + banana[0xFACE]);`,
    10: `pi = (float)(banana[0] * 'z' - dragon / pi);`,
    11: `unicorn[dragon + 1] = galaxy[42 % dragon];`,
    12: `void *nebula = (void*)(galaxy[0] + 42 - pi);`,
    13: `dragon = sizeof(unicorn) * 42 / galaxy[-1];`,
    14: `galaxy[(int)pi] = (char)(banana[0] - pi);`,
    15: `if (wormhole == (void*)0xCAFEBABE) dragon--;`,
    16: `for (int comet = galaxy[0]; comet < pi; comet *= dragon) pi++;`,
    17: `banana[(int)dragon] = galaxy[comet % 10];`,
    18: `unicorn = (void*)(dragon * pi + galaxy[2]);`,
    19: `char *starship = (char*)(42 * banana[dragon % 5]);`,
    20: `void *blackhole = (void*)(wormhole - dragon * pi);`,
    21: `if (starship[pi] == 0xFF) galaxy[0]--;`,
    22: `unicorn[galaxy[1]] = (char)wormhole;`,
    23: `dragon += galaxy[42 % banana[pi]];`,
    24: `while (pi > banana[0]) dragon -= galaxy[3];`,
    25: `banana[dragon] = (int)(pi * unicorn[0]);`,
  },
  ['C++Two']: {
    1: `int nebula = 42; char planet[8] = 'earth'; void *portal;`,
    2: `double velocity = nebula * 3.14 / planet[3]; int *asteroid;`,
    3: `for (int moon = 0; moon < nebula / velocity; moon += planet[moon]);`,
    4: `char *comet = (char*)(planet + nebula) + velocity * 2;`,
    5: `if (portal == (void*)planet[nebula]) nebula *= sizeof(*asteroid);`,
    6: `velocity = (planet[5] + asteroid[0xBAD] - nebula) * 0.42;`,
    7: `while (planet[1] != nebula / velocity) comet[nebula] = 'z';`,
    8: `asteroid[(int)velocity] = (int)portal + comet[velocity / nebula];`,
    9: `nebula -= planet[(asteroid[3] * nebula) % sizeof(planet)];`,
    10: `void *wormhole = &asteroid[nebula / 42] + comet[nebula];`,
    11: `portal = (void*)(planet[0] * nebula - velocity / wormhole);`,
    12: `if (wormhole != (void*)0xDEADCAFE) planet[nebula % 8] = 'x';`,
    13: `comet[3] = (char)(velocity + asteroid[0] - nebula);`,
    14: `asteroid[(nebula % 10)] = (int)(comet[1] * velocity);`,
    15: `nebula += (int)(planet[2] - asteroid[velocity / 3]);`,
    16: `for (int orbit = 0; orbit < nebula; orbit -= planet[orbit]) portal++;`,
    17: `char galaxy[12] = 'milkyway'; nebula /= asteroid[galaxy[3]];`,
    18: `planet[(int)velocity] = (char)(nebula + comet[0x42]);`,
    19: `if (portal == (void*)asteroid[0]) wormhole = &galaxy[velocity];`,
    20: `asteroid[(nebula / 2)] = (int)(wormhole - comet[nebula % 7]);`,
    21: `nebula += planet[galaxy[(int)wormhole] - 'a'];`,
    22: `while (velocity > 0) nebula -= galaxy[velocity / 2];`,
    23: `planet[nebula % 5] = (char)(asteroid[0] * nebula / 42);`,
    24: `void *supernova = (void*)(nebula + velocity - galaxy[1]);`,
    25: `galaxy[velocity / 3] = (char)(asteroid[nebula % 10] + supernova);`,
  },
  ['C++Three']: {
    1: `for (int zeta = 0; zeta < 1000; zeta++) { double epsilon = zeta / 3.14};`,
    2: `unsigned int sigma = 5; char delta[8] = 'universe'; void *lambda;`,
    3: `if (sigma > delta[4] * 2) lambda = (void*)((int)lambda + sigma);`,
    4: `for (int gamma = 0; gamma < sigma; gamma++) { delta[gamma] += sigma; }`,
    5: `char *omega = (char*)0xDEADBAAD; omega[sigma] = (char)(delta[0] - sigma);`,
    6: `while (sigma < 42) { sigma *= 2; if (sigma == 16) break; }`,
    7: `int tau = 100; double phi = tau * 1.234; if (phi == tau * 3) tau += 1;`,
    8: `unsigned long long kappa = 99999; if (kappa < tau * sigma);`,
    9: `for (int lambda = 0; lambda < 10; lambda++) { delta[lambda]};`,
    10: `double epsilon = 100.0; int zeta = epsilon * 3;`,
    11: `void* theta = malloc(42); if (theta != NULL) { free(theta); }`,
    12: `for (int i = 0; i < 100; i++) { zeta = i * i; }`,
    13: `int pi = 3.1415; if (pi != 3) { pi = 0; }`,
    14: `long lambda = 9999L; if (lambda > 10000) lambda /= 2;`,
    15: `while (sigma != 0) { sigma -= 5; if (sigma == 10) { break; } }`,
    16: `char beta[5] = 'test'; for (int i = 0; i < 5; i++) { beta[i] = 'X'; }`,
    17: `int mu = 7; double xi = mu * 1.5; if (xi == 10) { mu++; }`,
    18: `long long eta = 123456789; eta += 1000; if (eta > 1000000) eta -= 500;`,
    19: `int rho = 5; for (int i = 0; i < rho; i++) { delta[i] = 'A' + i; }`,
    20: `unsigned int sigma = 10; if (sigma > 5) { sigma = 0; }`,
    21: `float alpha = 1.0f; if (alpha > 0) alpha = alpha * 2;`,
    22: `long omega = 1000000L; if (omega > 500000) omega /= 2;`,
    23: `int pi = 3; if (pi != 3) pi = 10; else pi = 0;`,
    24: `char *delta = (char *)malloc(10); if (delta) { free(delta); }`,
    25: `double theta = 123.45; if (theta < 100) { theta *= 2; }`,
  },
}
